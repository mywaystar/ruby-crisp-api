# Crisp API Ruby

## Installation

`gem install ruby-crisp-api`

* **📝 Implements**: [Crisp Platform - API ~ v1](https://docs.crisp.im/api/v1/) at reference revision: 07/17/2016
* **😘 Maintainer**: [@mywaystar](https://github.com/mywaystar)


## API Overview

```ruby

require 'crisp'

crisp_client = Crisp::Client.new
```

To use Crisp, first, you have to login

```ruby
crisp_client.user_session.login_with_email("your_email@.com", "your_password")
```

When you are logged you can then use the Crisp API

```ruby
profile = crisp_client.user_profile.get()
puts "Hello " + profile["first_name"]
```

## Create your own bot!


```ruby
require 'crisp'

crisp_client = Crisp::Client.new
crisp_client.user_session.login_with_email("your_email@.com", "your_password")
crisp_client.on "message:send" do |message|
  crisp_client.website_conversation.send_message_in_conversation(
    message["website_id"],
    message["session_id"],
    {
      :origin  => "chat",
      :content => "I'm a bot",
      :type    => "text",
      :from    => "operator"
    }
  )
end

#trick to keep the script running
loop do
  msg = STDIN.gets.strip
end
```

### Available resources & methods

*Where you see `params` it is a plain object, e.g. `{ email: 'foo@example.com' }`*

  * on(event, callback)
  * user_session
    * `login_with_email(email, password)`
    * `recover_password(email)`
    * `logout()`
  * user_account
    * `get()`
    * `create(params)`
  * user_notification
    * `get()`
    * `update(params)`
  * user_profile
    * `get()`
    * `update(params)`
  * user_schedule
    * `get()`
    * `update(params)`
  * userWebsites
    * `get()`
  * website
    * `create(params)`
    * `delete(website_id)`
  * website_settings
    * `get(website_id)`
    * `update(website_id)`
  * website_statistics
    * `get(website_id)`
  * website_conversations
    * `list(website_id, page = 0)`
    * `search(website_id, page = 0, search_type, search_query)`
  * website_conversation
    * `create_new_conversation(website_id)`
    * `check_conversation_exists(website_id, session_id)`
    * `get_conversation(website_id, session_id)`
    * `remove_conversation(website_id, session_id)`
    * `initiate_conversation_with_existing_session(website_id, session_id)`
    * `get_messages_in_conversation(website_id, session_id)`
    * `send_message_in_conversation(website_id, session_id, message)`
    * `compose_message_in_conversation(website_id, session_id, compose)`
    * `mark_messages_read_in_conversation(website_id, session_id, read)`
    * `get_conversation_metas(website_id, session_id)`
    * `update_conversation_metas(website_id, session_id, metas)`
    * `get_conversation_state(website_id, session_id, metas)`
    * `change_conversation_state(website_id, session_id, state)`
    * `change_conversation_state(website_id, session_id, state)`
    * `get_block_status_for_conversation(website_id, session_id, blocked)`
    * `block_incoming_messages_for_conversation(website_id, session_id, blocked)`
  * website_operators
    * `get_list(website_id)`
    * `get_one(website_id, operator_id)`
    * `delete_one(website_id, operator_id)`
    * `create_one(website_id, parameters)`
    * `update_one(website_id, operator_id, parameters)`

### Available events

  * `message:send` Message from visitor
  * `message:received` Message from operator
  * `message:compose:send` Visitor is writing something
  * `message:acknowledge:read:send` Message is read from visitor
  * `message:acknowledge:read:received` Message is read from operator
  * `message:acknowledge:delivered` Message is delivered
  * `session:update_availability` Visitor is now online or offline
  * `session:request:initiatedy` You tried to initiate a message to someone
  * `session:set_email` Email is updated
  * `session:set_nickname` Nickname is updated
  * `session:set_avatar` Avatar is updated
  * `session:set_cover` Cover picture is updated
  * `session:set_block` User blocked updated
  * `session:set_state` Conversation state updated
  * `session:set_tags` Conversation new tags
  * `session:sync:pages` Visitor visited some pages
  * `session:sync:geolocation` Visitor new geolocation
  * `session:sync:system` Visitor new system (Useragent, etc)
  * `session:sync:extended_informations` Visitor new extended informations
  * `session:sync:removed` Conversation removed

### Play with source code

`
git clone git@github.com:crisp-im/ruby-crisp-api.git
cd ruby-crisp-api
emacs examples/basic.rb
bundle exec ruby -Ilib examples/basic.rb
`
